const { Composer, Markup } = require('telegraf');
const config = require('../../config');
const logger = require('../../utils/logger');
const { formatters } = require('../../utils/terminalFormatter');
const { createStarsInvoiceLink } = require('../payments/starsPayment');
const User = require('../../models/user');

const miniAppModule = new Composer();

// –ö–æ–º–∞–Ω–¥–∞ /miniapp - –∑–∞–ø—É—Å–∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞)
miniAppModule.command('miniapp', async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ª–∏ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if (!config.miniApp.url) {
      await ctx.reply(formatters.error('–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.'));
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    const keyboard = Markup.keyboard([
      Markup.button.webApp('üñ•Ô∏è –û—Ç–∫—Ä—ã—Ç—å TERM —Ç–µ—Ä–º–∏–Ω–∞–ª', config.miniApp.url)
    ]).resize();
    
    await ctx.reply(
      formatters.info('TERM - –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ Retarded Caf√©') +
      '\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.',
      keyboard
    );
  } catch (error) {
    logger.error(`Error in miniapp command handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /webapp - –∑–∞–ø—É—Å–∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å inline –∫–Ω–æ–ø–∫–æ–π)
miniAppModule.command('webapp', async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ª–∏ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if (!config.miniApp.url) {
      await ctx.reply(formatters.error('–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.'));
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if (!ctx.user.hasActiveSubscription()) {
      await ctx.reply(
        formatters.warning('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.'),
        Markup.inlineKeyboard([
          [Markup.button.callback('–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'back_to_subscription_type')]
        ])
      );
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const inlineKeyboard = Markup.inlineKeyboard([
      [Markup.button.webApp('üñ•Ô∏è –û—Ç–∫—Ä—ã—Ç—å TERM —Ç–µ—Ä–º–∏–Ω–∞–ª', config.miniApp.url)]
    ]);
    
    await ctx.reply(
      formatters.info('TERM - –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ Retarded Caf√©') +
      '\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram.',
      inlineKeyboard
    );
  } catch (error) {
    logger.error(`Error in webapp command handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
miniAppModule.command('miniapp_debug', async (ctx) => {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info('MiniApp debug command triggered', {
      userId: ctx.from.id,
      username: ctx.from.username,
      chatId: ctx.chat.id,
      chatType: ctx.chat.type
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await ctx.reply(
      formatters.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:') +
      `\n\nUser ID: ${ctx.from.id}` + 
      `\nUsername: ${ctx.from.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}` +
      `\nChat ID: ${ctx.chat.id}` +
      `\nChat Type: ${ctx.chat.type}` +
      `\nMini-App URL: ${config.miniApp.url || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}` +
      `\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:`,
      Markup.inlineKeyboard([
        [Markup.button.webApp('üß™ –û—Ç–∫—Ä—ã—Ç—å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏', config.miniApp.url)]
      ])
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –æ—Ç–ª–∞–¥–∫–µ
    await ctx.reply(
      formatters.info('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ç–ª–∞–¥–∫–µ:') +
      '\n\n1. –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã—à–µ' +
      '\n2. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞' +
      '\n3. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' +
      '\n4. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞' +
      '\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /webapp –≤–º–µ—Å—Ç–æ /miniapp –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.'
    );
  } catch (error) {
    logger.error(`Error in miniapp_debug command handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
miniAppModule.command('webapp_test', async (ctx) => {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info('WebApp test command triggered', {
      userId: ctx.from.id,
      username: ctx.from.username,
      chatId: ctx.chat.id,
      chatType: ctx.chat.type
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    if (!config.miniApp.url) {
      await ctx.reply(formatters.error('–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.'));
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ URL
    const testUrl = `${config.miniApp.url}?test=true&user_id=${ctx.from.id}`;
    
    // –°–æ–∑–¥–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const html = `
<b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebApp Data</b>

1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"</b>
2. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –õ–Æ–ë–£–Æ –∫–Ω–æ–ø–∫—É
3. –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –±–æ—Ç—É

<i>–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–µ–±—Ö—É–∫–æ–≤.</i>

<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:</b>
User ID: ${ctx.from.id}
URL: ${testUrl}
    `;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await ctx.replyWithHTML(html, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üß™ –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: testUrl } }]
        ]
      }
    });
    
  } catch (error) {
    logger.error(`Error in webapp_test command handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.'));
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
miniAppModule.on('web_app_data', async (ctx) => {
  try {
    logger.info('===== WEB APP DATA RECEIVED =====');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É ctx
    logger.info('Context structure:', {
      updateType: ctx.updateType,
      updateSubTypes: ctx.updateSubTypes,
      hasUpdate: !!ctx.update,
      updateKeys: ctx.update ? Object.keys(ctx.update) : [],
      hasWebAppData: !!(ctx.update && ctx.update.message && ctx.update.message.web_app_data),
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info('Message structure:', {
      hasMessage: !!ctx.message,
      messageKeys: ctx.message ? Object.keys(ctx.message) : [],
      webAppDataExists: !!(ctx.message && ctx.message.web_app_data),
      webAppDataKeys: (ctx.message && ctx.message.web_app_data) ? Object.keys(ctx.message.web_app_data) : []
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const webAppData = ctx.webAppData.data;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(`Raw data received from mini app: "${webAppData}"`, {
      userId: ctx.from.id,
      username: ctx.from.username,
      chatId: ctx.chat.id,
      chatType: ctx.chat.type,
      dataLength: webAppData ? webAppData.length : 0
    });
    
    // –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –æ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON)
    let parsedData;
    try {
      parsedData = JSON.parse(webAppData);
      logger.info('Successfully parsed JSON data from mini app', { parsedData });
    } catch (e) {
      logger.error(`Error parsing JSON data from mini app: ${e.message}`, {
        error: e,
        rawData: webAppData
      });
      parsedData = { rawData: webAppData };
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info(`Received data from mini app for user ${ctx.from.id}`, { 
      data: parsedData,
      dataType: typeof parsedData,
      hasAction: !!parsedData.action
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    await ctx.reply(
      formatters.info('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è') +
      `\n\n–î–µ–π—Å—Ç–≤–∏–µ: ${parsedData.action || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}` +
      (parsedData.duration ? `\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${parsedData.duration}` : '') +
      (parsedData.channel ? `\n–ö–∞–Ω–∞–ª: ${parsedData.channel}` : '') +
      (parsedData.test_mode ? `\n–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –î–∞` : '') +
      `\n\nJSON: ${JSON.stringify(parsedData, null, 2).substring(0, 200)}`,
      { reply_markup: { remove_keyboard: true } }
    );
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —Ç–∏–ø–∞
    if (parsedData.action) {
      switch (parsedData.action) {
        case 'subscribe':
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
          await ctx.reply(
            formatters.info('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏...'),
            { reply_markup: { remove_keyboard: true } }
          );
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
          await showSubscriptionTypeSelection(ctx);
          break;
          
        case 'subscribe_term':
          // –ü—Ä—è–º–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ TERM
          await ctx.reply(
            formatters.info('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ TERM...'),
            { reply_markup: { remove_keyboard: true } }
          );
          
          // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ, —Å—Ä–∞–∑—É –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Stars
          if (parsedData.duration) {
            logger.info(`Initiating direct payment for ${parsedData.duration} subscription from mini-app`, {
              duration: parsedData.duration,
              userId: ctx.from.id,
              test_mode: parsedData.test_mode || false
            });
            
            try {
              // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –º–æ–¥—É–ª–µ –ø–ª–∞—Ç–µ–∂–µ–π
              const tierId = parsedData.duration;
              const tier = config.subscriptionTiers[tierId];
              
              if (!tier) {
                throw new Error(`Invalid subscription tier: ${tierId}`);
              }
              
              logger.info(`Found tier: ${tierId}`, {
                tier,
                price: tier.price,
                test_mode: parsedData.test_mode || false
              });
              
              // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
              const title = `–ü–æ–¥–ø–∏—Å–∫–∞ TERM "${tier.name}"`;
              const description = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${tier.durationInDays} –¥–Ω–µ–π: ${tier.description}`;
              const amount = tier.price;
              const payload = JSON.stringify({
                type: 'term_subscription',
                tierId: tierId,
                userId: ctx.from.id,
                duration: tier.durationInDays
              });
              
              // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ Stars
              const starsPaymentModule = require('../payments/starsPayment');
              
              logger.info('Preparing to send Stars invoice', {
                title,
                description: description.substring(0, 30) + '...',
                amount
              });
              
              // –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞
              await starsPaymentModule.sendStarsInvoice(ctx, tierId, title, description, amount, payload);
              
              logger.info(`Stars invoice sent successfully for ${tierId} from mini-app`);
              
              // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞
              await ctx.reply(formatters.success('–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.'));
              
            } catch (invoiceError) {
              logger.error(`Error creating invoice from mini-app: ${invoiceError.message}`, { 
                error: invoiceError,
                stack: invoiceError.stack,
                tierId: parsedData.duration
              });
              
              // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              await ctx.reply(
                formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:') +
                `\n\n${invoiceError.message}` +
                '\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é /subscribe.'
              );
            }
          } else {
            // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
            try {
              // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ —ç–∫—à–µ–Ω
              await ctx.reply('–û—Ç–∫—Ä—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ TERM...');
              await ctx.telegram.sendMessage(
                ctx.from.id, 
                '/subscribe'
              );
            } catch (err) {
              logger.error(`Failed to trigger term_subscription action: ${err.message}`, { error: err });
              await ctx.reply(formatters.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫. –í–≤–µ–¥–∏—Ç–µ /subscribe —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.'));
            }
          }
          break;
          
        case 'subscribe_channels':
          // –ü—Ä—è–º–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
          await ctx.reply(
            formatters.info('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã...'),
            { reply_markup: { remove_keyboard: true } }
          );
          
          // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –Ω–µ–º—É
          if (parsedData.channel) {
            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã stars (API), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (parsedData.payment === 'stars') {
              logger.info(`Initiating direct Stars payment for channel ${parsedData.channel} from mini-app`, {
                channelId: parsedData.channel,
                userId: ctx.from.id,
                test_mode: parsedData.test_mode || false
              });
              
              try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é findChannelById
                const channelId = parsedData.channel;
                const channel = findChannelById(channelId);
                
                if (!channel) {
                  throw new Error(`Channel not found: ${channelId}`);
                }
                
                logger.info(`Found channel: ${channelId}`, {
                  channel,
                  price: channel.starsPrice,
                  test_mode: parsedData.test_mode || false
                });
                
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
                const title = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "${channel.name}"`;
                const description = `–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É ${channel.name}: ${channel.description}`;
                const amount = channel.starsPrice;
                const payload = JSON.stringify({
                  type: 'channel_subscription',
                  channelId: channelId,
                  userId: ctx.from.id,
                  duration: 30 // 30 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                });
                
                // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ Stars
                const starsPaymentModule = require('../payments/starsPayment');
                
                logger.info('Preparing to send Stars invoice for channel', {
                  title,
                  description: description.substring(0, 30) + '...',
                  amount
                });
                
                // –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞
                await starsPaymentModule.sendStarsInvoice(ctx, channelId, title, description, amount, payload);
                
                logger.info(`Stars invoice sent successfully for channel ${channelId} from mini-app`);
                
                // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞
                await ctx.reply(formatters.success('–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.'));
                
              } catch (invoiceError) {
                logger.error(`Error creating invoice for channel from mini-app: ${invoiceError.message}`, { 
                  error: invoiceError,
                  stack: invoiceError.stack,
                  channelId: parsedData.channel
                });
                
                // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await ctx.reply(
                  formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:') +
                  `\n\n${invoiceError.message}` +
                  '\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é /subscribe.'
                );
              }
            } else {
              // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É Stars
              try {
                await ctx.reply('–û—Ç–∫—Ä—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª...');
                await ctx.telegram.sendMessage(
                  ctx.from.id, 
                  `/channel ${parsedData.channel}`
                );
              } catch (err) {
                logger.error(`Failed to trigger manual channel subscription: ${err.message}`, { error: err });
                await ctx.reply(formatters.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ. –í–≤–µ–¥–∏—Ç–µ /subscribe —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.'));
              }
            }
          } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –º–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤
            try {
              await ctx.reply('–û—Ç–∫—Ä—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...');
              await ctx.telegram.sendMessage(
                ctx.from.id, 
                '/subscribe'
              );
            } catch (err) {
              logger.error(`Failed to open channels menu: ${err.message}`, { error: err });
              await ctx.reply(formatters.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ /subscribe —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.'));
            }
          }
          break;
          
        case 'content':
          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
          await ctx.reply(
            formatters.info('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º...'),
            { reply_markup: { remove_keyboard: true } }
          );
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /content
          await ctx.telegram.sendMessage(ctx.from.id, '/content');
          break;
          
        case 'ask_ai':
          // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª "–°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò"
          await ctx.reply(
            formatters.info('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª "–°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò" –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.'),
            { reply_markup: { remove_keyboard: true } }
          );
          break;
          
        case 'status':
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫
          await ctx.reply(
            formatters.info('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...'),
            { reply_markup: { remove_keyboard: true } }
          );
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /status
          await ctx.telegram.sendMessage(ctx.from.id, '/status');
          break;
          
        default:
          await ctx.reply(
            formatters.info(`–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${JSON.stringify(parsedData)}`),
            { reply_markup: { remove_keyboard: true } }
          );
      }
    } else {
      await ctx.reply(
        formatters.info(`–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${JSON.stringify(parsedData)}`),
        { reply_markup: { remove_keyboard: true } }
      );
    }
  } catch (error) {
    logger.error(`Error in web_app_data handler: ${error.message}`, { error });
    await ctx.reply(
      formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'),
      { reply_markup: { remove_keyboard: true } }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—É—Å–∫–µ –∫–∞–Ω–∞–ª–æ–≤
miniAppModule.on('message', async (ctx, next) => {
  if (ctx.message && ctx.message.web_app_data) {
    try {
      const data = JSON.parse(ctx.message.web_app_data.data);
      
      if (data.action === 'notify_launch' && data.channel) {
        logger.info('Launch notification request received', {
          userId: ctx.from.id,
          username: ctx.from.username,
          channel: data.channel
        });
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        let user = ctx.user;
        
        if (!user) {
          user = await User.findOne({ telegramId: ctx.from.id });
        }
        
        if (!user) {
          logger.error(`User not found: ${ctx.from.id}`);
          await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
          return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º pendingChannelSubscriptions
        const existingRequest = user.pendingChannelSubscriptions.find(
          req => req.channelId === data.channel && req.status === 'pending'
        );
        
        if (!existingRequest) {
          user.pendingChannelSubscriptions.push({
            channelId: data.channel,
            requestDate: new Date(),
            status: 'pending'
          });
          
          await user.save();
          logger.info(`User ${ctx.from.id} subscribed to launch notifications for ${data.channel}`);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await ctx.reply(formatters.success('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ!') + 
          '\n\n–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–æ–≥–¥–∞ –∫–∞–Ω–∞–ª Digital Nomad Protocol —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for (const adminId of config.bot.adminUserIds) {
          try {
            await ctx.telegram.sendMessage(
              adminId,
              formatters.info('–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ') +
              `\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from.id} (${ctx.from.username || '–±–µ–∑ username'})` +
              `\n–ö–∞–Ω–∞–ª: ${data.channel}` +
              `\n–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`
            );
          } catch (e) {
            logger.error(`Failed to notify admin ${adminId}: ${e.message}`);
          }
        }
        
        return;
      }
    } catch (error) {
      logger.error(`Error processing notify_launch request: ${error.message}`, { error });
    }
  }
  
  return next();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function showSubscriptionTypeSelection(ctx) {
  const subscriptionTypeKeyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üì± –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ TERM', 'term_subscription')],
    [Markup.button.callback('üì¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã', 'channels_menu')]
  ]);

  await ctx.reply(
    formatters.info('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:') + 
    '\n\nüì± –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ TERM - –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º' +
    '\n\nüì¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º Telegram-–∫–∞–Ω–∞–ª–∞–º',
    subscriptionTypeKeyboard
  );
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è invoice link –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –∫–ª–∏–µ–Ω—Ç—É
miniAppModule.command('create_invoice_link', async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const args = ctx.message.text.split(' ');
    
    if (args.length < 2) {
      await ctx.reply(formatters.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏ ID —Ç–∞—Ä–∏—Ñ–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /create_invoice_link term monthly'));
      return;
    }
    
    const type = args[1]; // term –∏–ª–∏ channel
    const itemId = args[2]; // ID —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞
    
    logger.info('Creating invoice link', { type, itemId, userId: ctx.from.id });
    
    if (type === 'term') {
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ TERM
      const tier = config.subscriptionTiers[itemId];
      
      if (!tier) {
        logger.error(`Tier not found: ${itemId}`);
        await ctx.reply(formatters.error('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'));
        return;
      }
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
      const title = `–ü–æ–¥–ø–∏—Å–∫–∞ TERM "${tier.name}"`;
      const description = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${tier.durationInDays} –¥–Ω–µ–π: ${tier.description}`;
      const amount = tier.price; 
      const payload = JSON.stringify({
        type: 'term_subscription',
        tierId: itemId,
        userId: ctx.from.id,
        duration: tier.durationInDays
      });
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å
      const invoiceLink = await createStarsInvoiceLink(
        ctx.telegram, 
        itemId, 
        title, 
        description, 
        amount, 
        payload, 
        ctx.from.id
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(
        formatters.success('–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:') +
        `\n\n–¢–∞—Ä–∏—Ñ: ${tier.name}` +
        `\n–°—É–º–º–∞: ${amount} Stars` +
        `\n–°—Ä–æ–∫: ${tier.durationInDays} –¥–Ω–µ–π` +
        '\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:',
        Markup.inlineKeyboard([
          [Markup.button.url('–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', invoiceLink)]
        ])
      );
      
      logger.info('Invoice link sent to user', { userId: ctx.from.id, tierId: itemId });
      
    } else if (type === 'channel') {
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
      const channelId = itemId;
      const channel = findChannelById(channelId);
      
      if (!channel) {
        logger.error(`Channel not found: ${channelId}`);
        await ctx.reply(formatters.error('–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'));
        return;
      }
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
      const title = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "${channel.name}"`;
      const description = `–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É ${channel.name}: ${channel.description}`;
      const amount = channel.starsPrice;
      const payload = JSON.stringify({
        type: 'channel_subscription',
        channelId: channelId,
        userId: ctx.from.id,
        duration: 30 // 30 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      });
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å
      const invoiceLink = await createStarsInvoiceLink(
        ctx.telegram, 
        channelId, 
        title, 
        description, 
        amount, 
        payload, 
        ctx.from.id
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(
        formatters.success('–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:') +
        `\n\n–ö–∞–Ω–∞–ª: ${channel.name}` +
        `\n–°—É–º–º–∞: ${amount} Stars` +
        `\n–°—Ä–æ–∫: 30 –¥–Ω–µ–π` +
        '\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:',
        Markup.inlineKeyboard([
          [Markup.button.url('–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', invoiceLink)]
        ])
      );
      
      logger.info('Invoice link sent to user', { userId: ctx.from.id, channelId });
    } else {
      await ctx.reply(formatters.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. –£–∫–∞–∂–∏—Ç–µ term –∏–ª–∏ channel.'));
    }
  } catch (error) {
    logger.error(`Error creating invoice link: ${error.message}`, { error });
    await ctx.reply(formatters.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É: ${error.message}`));
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è invoice link
miniAppModule.command('test_invoice', async (ctx) => {
  try {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ monthly
    const tierId = 'monthly';
    const tier = config.subscriptionTiers[tierId];
    
    if (!tier) {
      await ctx.reply(formatters.error('–¢–∞—Ä–∏—Ñ monthly –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.'));
      return;
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    const title = `–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ TERM "${tier.name}"`;
    const description = `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${tier.durationInDays} –¥–Ω–µ–π: ${tier.description}`;
    const amount = tier.price;
    const payload = JSON.stringify({
      type: 'term_subscription',
      tierId: tierId,
      userId: ctx.from.id,
      duration: tier.durationInDays,
      test: true
    });
    
    logger.info('Creating test invoice link', { 
      tierId, 
      userId: ctx.from.id,
      amount
    });
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å
      const invoiceLink = await createStarsInvoiceLink(
        ctx.telegram, 
        tierId, 
        title, 
        description, 
        amount, 
        payload, 
        ctx.from.id
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(
        formatters.success('–¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:') +
        `\n\n–¢–∞—Ä–∏—Ñ: ${tier.name}` +
        `\n–°—É–º–º–∞: ${amount} Stars` +
        `\n–°—Ä–æ–∫: ${tier.durationInDays} –¥–Ω–µ–π` +
        '\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É:',
        Markup.inlineKeyboard([
          [Markup.button.url('–û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É', invoiceLink)]
        ])
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      await ctx.reply(
        formatters.info('–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ –Ω–µ–≥–æ:'),
        Markup.inlineKeyboard([
          [Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', `${config.miniApp.url}?test=true`)]
        ])
      );
      
      logger.info('Test invoice link sent to user', { userId: ctx.from.id });
    } catch (invoiceLinkError) {
      logger.error(`Error creating test invoice link: ${invoiceLinkError.message}`, { 
        error: invoiceLinkError,
        tokenInfo: config.payment.tokenInfo
      });
      
      await ctx.reply(
        formatters.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–∏: ${invoiceLinkError.message}`) +
        '\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.'
      );
    }
  } catch (error) {
    logger.error(`Error in test_invoice command: ${error.message}`, { error });
    await ctx.reply(formatters.error(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–∏: ${error.message}`));
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ ID (—Ç–∞–∫–∞—è –∂–µ, –∫–∞–∫ –≤ starsPayment.js)
function findChannelById(channelId) {
  for (const key in config.channels) {
    if (config.channels[key].id === channelId) {
      return config.channels[key];
    }
  }
  return null;
}

module.exports = miniAppModule; 