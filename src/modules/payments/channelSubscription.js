const { Composer, Markup } = require('telegraf');
const User = require('../../models/user');
const logger = require('../../utils/logger');
const config = require('../../config');
const { formatters } = require('../../utils/terminalFormatter');

const channelSubscriptionModule = new Composer();

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
channelSubscriptionModule.command('channels', async (ctx) => {
  try {
    await showChannelSelection(ctx);
  } catch (error) {
    logger.error(`Error in channels command: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
channelSubscriptionModule.action('channels_menu', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    await showChannelSelection(ctx);
  } catch (error) {
    logger.error(`Error in channels_menu action: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
async function showChannelSelection(ctx) {
  const channels = config.channels;
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
  const keyboard = [];
  
  for (const key in channels) {
    const channel = channels[key];
    keyboard.push([
      Markup.button.callback(
        `${channel.name} - ${channel.starsPrice} Stars`,
        `select_channel_${channel.id}`
      )
    ]);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
  keyboard.push([
    Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_subscription_type')
  ]);
  
  const channelsKeyboard = Markup.inlineKeyboard(keyboard);
  
  await ctx.reply(
    formatters.info('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:') +
    '\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.', 
    channelsKeyboard
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
channelSubscriptionModule.action(/^select_channel_(.+)$/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const channelId = ctx.match[1];
    const channel = findChannelById(channelId);
    
    if (!channel) {
      await ctx.reply(formatters.error('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'));
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã
    const paymentKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí´ –û–ø–ª–∞—Ç–∏—Ç—å Telegram Stars', `stars_channel_${channelId}`)],
      [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–∞', 'back_to_channels')]
    ]);
    
    await ctx.editMessageText(
      formatters.info(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª "${channel.name}"`) +
      `\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${channel.starsPrice} Stars` +
      `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30 –¥–Ω–µ–π` +
      '\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:',
      paymentKeyboard
    );
    
  } catch (error) {
    logger.error(`Error in select_channel handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ Stars –Ω–∞ –∫–∞–Ω–∞–ª—ã
channelSubscriptionModule.action(/^manual_channel_(.+)$/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const channelId = ctx.match[1];
    const channel = findChannelById(channelId);
    
    if (!channel) {
      await ctx.reply(formatters.error('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'));
      return;
    }
    
    await createChannelSubscriptionRequest(ctx, channel);
  } catch (error) {
    logger.error(`Error in manual_channel handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ ID
function findChannelById(channelId) {
  for (const key in config.channels) {
    if (config.channels[key].id === channelId) {
      return config.channels[key];
    }
  }
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∫ –∫–∞–Ω–∞–ª—É
async function createChannelSubscriptionRequest(ctx, channel) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
    if (ctx.user.hasActiveChannelSubscription(channel.id)) {
      await ctx.reply(
        formatters.info(`–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "${channel.name}"`) +
        '\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /status.'
      );
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const pendingRequest = ctx.user.pendingChannelSubscriptions.find(
      sub => sub.channelId === channel.id && sub.status === 'pending'
    );
    
    if (pendingRequest) {
      const requestDate = new Date(pendingRequest.requestDate).toLocaleDateString('ru-RU');
      
      await ctx.reply(
        formatters.info(`–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∫ –∫–∞–Ω–∞–ª—É "${channel.name}"`) +
        `\n–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: ${requestDate}` +
        '\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.'
      );
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
    ctx.user.pendingChannelSubscriptions.push({
      channelId: channel.id,
      requestDate: new Date(),
      status: 'pending'
    });
    
    await ctx.user.save();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ Stars
    const starsAmount = channel.starsPrice;
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const message = formatters.info(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª "${channel.name}"`) +
      `\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${starsAmount} Stars` +
      `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30 –¥–Ω–µ–π` +
      '\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:' +
      '\n1. –û—Ç–∫—Ä–æ–π—Ç–µ Settings > Telegram Stars –≤ –≤–∞—à–µ–º Telegram' +
      '\n2. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ Stars (–∑–≤–µ–∑–¥—ã) –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∏–∂–µ –∞–∫–∫–∞—É–Ω—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –≤–∞—à–µ–≥–æ ID' +
      '\n3. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É' +
      `\n\n–í–∞—à ID –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${ctx.user.telegramId}` +
      '\n\n–ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ Stars: @retarded_cafe';
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å Telegram Stars', 'tg://settings/stars')],
      [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤', 'channels_menu')]
    ]);
    
    await ctx.reply(message, keyboard);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
    const adminIds = config.bot.adminUserIds;
    
    for (const adminId of adminIds) {
      try {
        await ctx.telegram.sendMessage(
          adminId,
          formatters.info(`–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª`) +
          `\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.user.telegramId} (${ctx.user.username || '–±–µ–∑ username'})` +
          `\n–ö–∞–Ω–∞–ª: ${channel.name}` +
          `\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${starsAmount} Stars` +
          `\n–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toLocaleString('ru-RU')}` +
          `\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/confirm_channel ${ctx.user.telegramId} ${channelId}`
        );
      } catch (e) {
        logger.error(`Failed to notify admin ${adminId}: ${e.message}`);
      }
    }
  } catch (error) {
    logger.error(`Error creating channel subscription request: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
channelSubscriptionModule.command('confirm_channel', async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const isAdmin = config.bot.adminUserIds.includes(ctx.from.id);
    
    if (!isAdmin) {
      await ctx.reply(formatters.error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.'));
      return;
    }
    
    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    const args = ctx.message.text.split(' ').slice(1);
    
    if (args.length < 2) {
      await ctx.reply(
        formatters.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.') +
        '\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /confirm_channel USER_ID CHANNEL_ID'
      );
      return;
    }
    
    const userId = parseInt(args[0]);
    const channelId = args[1];
    
    if (isNaN(userId)) {
      await ctx.reply(formatters.error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.'));
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ telegramId: userId });
    
    if (!user) {
      await ctx.reply(formatters.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª
    const channel = findChannelById(channelId);
    
    if (!channel) {
      await ctx.reply(formatters.error(`–ö–∞–Ω–∞–ª —Å ID ${channelId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –æ–∂–∏–¥–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
    const pendingRequestIndex = user.pendingChannelSubscriptions.findIndex(
      sub => sub.channelId === channelId && sub.status === 'pending'
    );
    
    if (pendingRequestIndex === -1) {
      await ctx.reply(formatters.error(`–û–∂–∏–¥–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∫ –∫–∞–Ω–∞–ª—É ${channel.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}.`));
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    user.updateChannelSubscription(channelId, 30); // –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π
    
    // –£–¥–∞–ª—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å
    user.pendingChannelSubscriptions.splice(pendingRequestIndex, 1);
    
    await user.save();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await ctx.reply(
      formatters.success(`–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª ${channel.name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`) +
      `\n–ö–∞–Ω–∞–ª: ${channel.name}` +
      `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30 –¥–Ω–µ–π` +
      `\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(user.channelSubscriptions.find(sub => sub.channelId === channelId).endDate).toLocaleDateString('ru-RU')}`
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.telegram.sendMessage(
      userId,
      formatters.success(`–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "${channel.name}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`) +
      `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30 –¥–Ω–µ–π` +
      `\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(user.channelSubscriptions.find(sub => sub.channelId === channelId).endDate).toLocaleDateString('ru-RU')}`,
      Markup.inlineKeyboard([
        [Markup.button.url(`–û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª ${channel.name}`, `https://t.me/${channel.username.replace('@', '')}`)]
      ])
    );
    
    logger.info(`Admin ${ctx.from.id} manually confirmed channel subscription for user ${userId}, channel ${channelId}`);
    
  } catch (error) {
    logger.error(`Error in confirm_channel command: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª.'));
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã
channelSubscriptionModule.command('mystatus', async (ctx) => {
  try {
    const user = ctx.user;
    
    if (user.channelSubscriptions.length === 0) {
      await ctx.reply(
        formatters.info('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã.') +
        '\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /channels, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.'
      );
      return;
    }
    
    let statusText = formatters.info('–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã:') + '\n\n';
    
    for (const subscription of user.channelSubscriptions) {
      const channel = findChannelById(subscription.channelId);
      
      if (!channel) continue;
      
      const endDate = new Date(subscription.endDate);
      const now = new Date();
      const isActive = subscription.active && endDate > now;
      const daysLeft = isActive ? Math.ceil((endDate - now) / (1000 * 60 * 60 * 24)) : 0;
      
      statusText += `${channel.name}: ${isActive ? formatters.success('–ê–∫—Ç–∏–≤–Ω–∞') : formatters.error('–ù–µ–∞–∫—Ç–∏–≤–Ω–∞')}\n`;
      if (isActive) {
        statusText += `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDate.toLocaleDateString('ru-RU')}\n`;
        statusText += `–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n\n`;
      } else {
        statusText += '–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n\n';
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    if (user.pendingChannelSubscriptions.length > 0) {
      statusText += formatters.info('–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:') + '\n\n';
      
      for (const request of user.pendingChannelSubscriptions) {
        if (request.status !== 'pending') continue;
        
        const channel = findChannelById(request.channelId);
        if (!channel) continue;
        
        const requestDate = new Date(request.requestDate).toLocaleDateString('ru-RU');
        
        statusText += `${channel.name}\n`;
        statusText += `–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: ${requestDate}\n`;
        statusText += '–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n';
      }
    }
    
    await ctx.reply(statusText);
    
  } catch (error) {
    logger.error(`Error in mystatus command: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

module.exports = channelSubscriptionModule; 