const { Composer, Markup } = require('telegraf');
const User = require('../../models/user');
const logger = require('../../utils/logger');
const config = require('../../config');
const { formatters } = require('../../utils/terminalFormatter');
const channelSubscriptionModule = require('./channelSubscription');
const starsPaymentModule = require('./starsPayment');

const paymentsModule = new Composer();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã
paymentsModule.use(channelSubscriptionModule);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Stars
paymentsModule.use(starsPaymentModule);

// –ö–æ–º–∞–Ω–¥–∞ /subscribe - –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
paymentsModule.command('subscribe', async (ctx) => {
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (TERM –∏–ª–∏ –∫–∞–Ω–∞–ª—ã)
    await showSubscriptionTypeSelection(ctx);
  } catch (error) {
    logger.error(`Error in subscribe command handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async function showSubscriptionTypeSelection(ctx) {
  const subscriptionTypeKeyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üì± –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ TERM', 'term_subscription')],
    [Markup.button.callback('üì¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã', 'channels_menu')]
  ]);

  await ctx.reply(
    formatters.info('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:') + 
    '\n\nüì± –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ TERM - –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º' +
    '\n\nüì¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º Telegram-–∫–∞–Ω–∞–ª–∞–º',
    subscriptionTypeKeyboard
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ TERM
paymentsModule.action('term_subscription', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π
    if (ctx.user.hasActiveSubscription()) {
      const subscriptionEndDate = new Date(ctx.user.subscription.endDate).toLocaleDateString('ru-RU');
      const tier = ctx.user.subscription.tier;
      
      await ctx.editMessageText(
        formatters.info(`–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Ä–æ–≤–Ω—è "${tier}"`) +
        `\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${subscriptionEndDate}\n\n` +
        '–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É –¥–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é.',
        Markup.inlineKeyboard([
          [Markup.button.callback('–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'back_to_subscribe')],
          [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞', 'back_to_subscription_type')],
          [Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å TERM —Ç–µ—Ä–º–∏–Ω–∞–ª', config.miniApp.url)]
        ])
      );
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    const subscriptionKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞', 'select_payment_monthly')],
      [Markup.button.callback('–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (-10%)', 'select_payment_quarterly')],
      [Markup.button.callback('–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (-20%)', 'select_payment_annual')],
      [Markup.button.callback('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö', 'subscription_info')],
      [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞', 'back_to_subscription_type')]
    ]);

    await ctx.editMessageText(
      formatters.info('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ TERM:'), 
      subscriptionKeyboard
    );
  } catch (error) {
    logger.error(`Error in term_subscription handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
paymentsModule.action(/^select_payment_(.+)$/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const tierId = ctx.match[1];
    const tier = config.subscriptionTiers[tierId];
    
    if (!tier) {
      await ctx.reply(formatters.error('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'));
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã - —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø–ª–∞—Ç–∞
    const paymentKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí´ –û–ø–ª–∞—Ç–∏—Ç—å Telegram Stars', `stars_subscribe_${tierId}`)],
      [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞', 'back_to_subscribe')]
    ]);
    
    await ctx.editMessageText(
      formatters.info(`–í—ã –≤—ã–±—Ä–∞–ª–∏ "${tier.name}"`) +
      `\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${tier.price} Stars` +
      `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${tier.durationInDays} –¥–Ω–µ–π` +
      '\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:',
      paymentKeyboard
    );
    
  } catch (error) {
    logger.error(`Error in select_payment handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ Stars
paymentsModule.action(/^manual_stars_(.+)$/, async (ctx) => {
  await ctx.answerCbQuery();
  await createStarsPaymentRequest(ctx, ctx.match[1]);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
paymentsModule.action('back_to_subscription_type', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    await showSubscriptionTypeSelection(ctx);
  } catch (error) {
    logger.error(`Error in back_to_subscription_type handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö"
paymentsModule.action('subscription_info', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    let infoText = formatters.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö:') + '\n\n';
    
    // –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    infoText += 'üìå –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n' +
                `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${config.subscriptionTiers.monthly.price} Stars/–º–µ—Å—è—Ü\n` +
                '–í–∫–ª—é—á–∞–µ—Ç:\n';
    
    config.subscriptionTiers.monthly.features.forEach(feature => {
      infoText += `‚Ä¢ ${feature}\n`;
    });
    
    // –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    infoText += '\nüìå –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n' +
                `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${config.subscriptionTiers.quarterly.price} Stars/3 –º–µ—Å—è—Ü–∞ (—Å–∫–∏–¥–∫–∞ 10%)\n` +
                '–í–∫–ª—é—á–∞–µ—Ç:\n';
    
    config.subscriptionTiers.quarterly.features.forEach(feature => {
      infoText += `‚Ä¢ ${feature}\n`;
    });
    
    // –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    infoText += '\nüìå –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n' +
                `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${config.subscriptionTiers.annual.price} Stars/–≥–æ–¥ (—Å–∫–∏–¥–∫–∞ 20%)\n` +
                '–í–∫–ª—é—á–∞–µ—Ç:\n';
    
    config.subscriptionTiers.annual.features.forEach(feature => {
      infoText += `‚Ä¢ ${feature}\n`;
    });
    
    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏
    const backKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏', 'term_subscription')]
    ]);
    
    await ctx.editMessageText(infoText, backKeyboard);
  } catch (error) {
    logger.error(`Error in subscription_info handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏"
paymentsModule.action('back_to_subscribe', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    const subscriptionKeyboard = Markup.inlineKeyboard([
      [Markup.button.callback('–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞', 'select_payment_monthly')],
      [Markup.button.callback('–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (-10%)', 'select_payment_quarterly')],
      [Markup.button.callback('–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (-20%)', 'select_payment_annual')],
      [Markup.button.callback('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö', 'subscription_info')],
      [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞', 'back_to_subscription_type')]
    ]);

    await ctx.editMessageText(
      formatters.info('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ TERM:'), 
      subscriptionKeyboard
    );
  } catch (error) {
    logger.error(`Error in back_to_subscribe handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

// –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Stars
async function createStarsPaymentRequest(ctx, tierId) {
  try {
    const tier = config.subscriptionTiers[tierId];
    
    if (!tier) {
      throw new Error(`Invalid subscription tier: ${tierId}`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    ctx.user.pendingSubscription = {
      tierId,
      requestDate: new Date(),
      status: 'pending'
    };
    
    await ctx.user.save();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ Stars (1 ‚ÇΩ = 1 Star –ø—Ä–∏–º–µ—Ä–Ω–æ)
    const starsAmount = tier.price;
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const message = formatters.info(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É "${tier.name}"`) +
      `\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ~${starsAmount} Telegram Stars` +
      `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${tier.durationInDays} –¥–Ω–µ–π` +
      '\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:' +
      '\n1. –û—Ç–∫—Ä–æ–π—Ç–µ Settings > Telegram Stars –≤ –≤–∞—à–µ–º Telegram' +
      '\n2. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ Stars (–∑–≤–µ–∑–¥—ã) –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∏–∂–µ –∞–∫–∫–∞—É–Ω—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –≤–∞—à–µ–≥–æ ID' +
      '\n3. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É' +
      `\n\n–í–∞—à ID –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ${ctx.user.telegramId}` +
      '\n\n–ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ Stars: @retarded_cafe';
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å Telegram Stars', 'tg://settings/stars')],
      [Markup.button.callback('¬´ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏', 'back_to_subscribe')]
    ]);
    
    await ctx.editMessageText(message, keyboard);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
    const adminIds = config.bot.adminUserIds;
    
    for (const adminId of adminIds) {
      try {
        await ctx.telegram.sendMessage(
          adminId,
          formatters.info(`–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É`) +
          `\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.user.telegramId} (${ctx.user.username || '–±–µ–∑ username'})` +
          `\n–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: ${tier.name}` +
          `\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${starsAmount} Stars` +
          `\n–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toLocaleString('ru-RU')}` +
          `\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/confirm_payment ${ctx.user.telegramId} ${tierId}`
        );
      } catch (e) {
        logger.error(`Failed to notify admin ${adminId}: ${e.message}`);
      }
    }
    
  } catch (error) {
    logger.error(`Error creating Stars payment request: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
}

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
paymentsModule.command('confirm_payment', async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const isAdmin = config.bot.adminUserIds.includes(ctx.from.id);
    
    if (!isAdmin) {
      await ctx.reply(formatters.error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.'));
      return;
    }
    
    // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    const args = ctx.message.text.split(' ').slice(1);
    
    if (args.length < 2) {
      await ctx.reply(
        formatters.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.') +
        '\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /confirm_payment USER_ID SUBSCRIPTION_TYPE'
      );
      return;
    }
    
    const userId = parseInt(args[0]);
    const tierId = args[1];
    
    if (isNaN(userId)) {
      await ctx.reply(formatters.error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.'));
      return;
    }
    
    if (!['monthly', 'quarterly', 'annual'].includes(tierId)) {
      await ctx.reply(
        formatters.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏.') +
        '\n–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: monthly, quarterly, annual'
      );
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ telegramId: userId });
    
    if (!user) {
      await ctx.reply(formatters.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`));
      return;
    }
    
    const tier = config.subscriptionTiers[tierId];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.updateSubscription(
      tierId,
      tier.durationInDays,
      'telegram_stars',
      tier.price,
      'RUB',
      `manual_confirm_${Date.now()}`
    );
    
    // –û—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    user.pendingSubscription = null;
    
    await user.save();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await ctx.reply(
      formatters.success(`–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`) +
      `\n–¢–∏–ø: ${tier.name}` +
      `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${tier.durationInDays} –¥–Ω–µ–π` +
      `\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(user.subscription.endDate).toLocaleDateString('ru-RU')}`
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.telegram.sendMessage(
      userId,
      formatters.success(`–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${tier.name}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`) +
      `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${tier.durationInDays} –¥–Ω–µ–π` +
      `\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(user.subscription.endDate).toLocaleDateString('ru-RU')}`,
      Markup.inlineKeyboard([
        [Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å TERM —Ç–µ—Ä–º–∏–Ω–∞–ª', config.miniApp.url)]
      ])
    );
    
    logger.info(`Admin ${ctx.from.id} manually confirmed subscription for user ${userId}, tier ${tierId}`);
    
  } catch (error) {
    logger.error(`Error in confirm_payment command: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.'));
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
paymentsModule.command('status', async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ TERM
    const hasTermSubscription = ctx.user.hasActiveSubscription();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    const hasAnyChannelSubscription = ctx.user.channelSubscriptions.some(sub => 
      sub.active && new Date(sub.endDate) > new Date()
    );
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    let statusMessage = formatters.info('–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:') + '\n\n';
    
    // –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ TERM
    statusMessage += 'üì± –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ TERM: ';
    if (hasTermSubscription) {
      const subscription = ctx.user.subscription;
      const endDate = new Date(subscription.endDate);
      const now = new Date();
      const daysLeft = Math.ceil((endDate - now) / (1000 * 60 * 60 * 24));
      const tier = config.subscriptionTiers[subscription.tier];
      
      statusMessage += formatters.success('–ê–∫—Ç–∏–≤–Ω–∞') + '\n';
      statusMessage += `–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: ${tier.name}\n`;
      statusMessage += `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDate.toLocaleDateString('ru-RU')}\n`;
      statusMessage += `–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n\n`;
    } else if (ctx.user.pendingSubscription) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É TERM
      const pendingTier = config.subscriptionTiers[ctx.user.pendingSubscription.tierId];
      const requestDate = new Date(ctx.user.pendingSubscription.requestDate).toLocaleDateString('ru-RU');
      
      statusMessage += formatters.warning('–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è') + '\n';
      statusMessage += `–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: ${pendingTier.name}\n`;
      statusMessage += `–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: ${requestDate}\n\n`;
    } else {
      statusMessage += formatters.error('–ù–µ–∞–∫—Ç–∏–≤–Ω–∞') + '\n\n';
    }
    
    // –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã
    statusMessage += 'üì¢ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n';
    
    if (ctx.user.channelSubscriptions.length === 0 && ctx.user.pendingChannelSubscriptions.length === 0) {
      statusMessage += '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã.\n\n';
    } else {
      // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
      for (const subscription of ctx.user.channelSubscriptions) {
        const channel = findChannelById(subscription.channelId);
        if (!channel) continue;
        
        const endDate = new Date(subscription.endDate);
        const now = new Date();
        const isActive = subscription.active && endDate > now;
        const daysLeft = isActive ? Math.ceil((endDate - now) / (1000 * 60 * 60 * 24)) : 0;
        
        statusMessage += `${channel.name}: ${isActive ? formatters.success('–ê–∫—Ç–∏–≤–Ω–∞') : formatters.error('–ù–µ–∞–∫—Ç–∏–≤–Ω–∞')}\n`;
        if (isActive) {
          statusMessage += `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDate.toLocaleDateString('ru-RU')}\n`;
          statusMessage += `–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft}\n\n`;
        } else {
          statusMessage += '–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n\n';
        }
      }
      
      // –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤
      for (const request of ctx.user.pendingChannelSubscriptions) {
        if (request.status !== 'pending') continue;
        
        const channel = findChannelById(request.channelId);
        if (!channel) continue;
        
        const requestDate = new Date(request.requestDate).toLocaleDateString('ru-RU');
        
        statusMessage += `${channel.name}: ${formatters.warning('–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')}\n`;
        statusMessage += `–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: ${requestDate}\n\n`;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏', 'back_to_subscription_type')]
    ]);
    
    if (hasTermSubscription) {
      keyboard.inline_keyboard.push([
        Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å TERM —Ç–µ—Ä–º–∏–Ω–∞–ª', config.miniApp.url)
      ]);
    }
    
    await ctx.reply(statusMessage, keyboard);
    
  } catch (error) {
    logger.error(`Error in status command: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏.'));
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ ID
function findChannelById(channelId) {
  for (const key in config.channels) {
    if (config.channels[key].id === channelId) {
      return config.channels[key];
    }
  }
  return null;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
paymentsModule.action('cancel_subscription_request', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if (!ctx.user.pendingSubscription) {
      await ctx.editMessageText(formatters.error('–£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É.'));
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
    ctx.user.pendingSubscription = null;
    await ctx.user.save();
    
    await ctx.editMessageText(
      formatters.success('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.'),
      Markup.inlineKeyboard([
        [Markup.button.callback('–û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É', 'back_to_subscription_type')]
      ])
    );
    
  } catch (error) {
    logger.error(`Error in cancel_subscription_request handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É.'));
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
paymentsModule.command('payment_debug', async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const isAdmin = config.bot.adminUserIds.includes(ctx.from.id);
    
    if (!isAdmin) {
      await ctx.reply(formatters.error('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.'));
      return;
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    const paymentConfig = {
      providerTokenExists: !!config.payment.providerToken,
      providerTokenLength: config.payment.providerToken ? config.payment.providerToken.length : 0,
      containsXTR: config.payment.providerToken ? config.payment.providerToken.includes('XTR') : false,
      isTest: config.payment.providerToken ? config.payment.providerToken.includes('TEST') : false,
      tokenFormat: config.payment.providerToken ? 
                  (/^\d+:.+:XTR_.+$/.test(config.payment.providerToken) ? 'Valid' : 'Invalid') : 'None',
      isYookassaConfigured: !!(config.payment.yookassaShopId && config.payment.yookassaSecretKey),
      miniAppUrl: config.miniApp.url
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await ctx.reply(
      formatters.info('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:') +
      `\n\nTelegram Stars (XTR):` +
      `\n‚Ä¢ –¢–æ–∫–µ–Ω: ${paymentConfig.providerTokenExists ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}` +
      `\n‚Ä¢ –î–ª–∏–Ω–∞: ${paymentConfig.providerTokenLength}` +
      `\n‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç XTR: ${paymentConfig.containsXTR ? '–î–∞' : '–ù–µ—Ç'}` +
      `\n‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π: ${paymentConfig.isTest ? '–î–∞' : '–ù–µ—Ç'}` +
      `\n‚Ä¢ –§–æ—Ä–º–∞—Ç: ${paymentConfig.tokenFormat}` +
      `\n\n–ÆKassa:` +
      `\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞: ${paymentConfig.isYookassaConfigured ? '–î–∞' : '–ù–µ—Ç'}` +
      `\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:` +
      `\n‚Ä¢ URL –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${paymentConfig.miniAppUrl}` +
      `\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Stars:` +
      `\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ @BotFather` +
      `\n2. –í—ã–±–µ—Ä–∏—Ç–µ /mybots` +
      `\n3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞` +
      `\n4. Payments > Add stars` +
      `\n5. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ .env.local`
    );
    
    logger.info('Payment system diagnostics requested', { 
      admin: ctx.from.id,
      config: paymentConfig
    });
    
  } catch (error) {
    logger.error(`Error in payment_debug command: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.'));
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
 */
paymentsModule.action(/^extend_term_(.+)$/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const tierId = ctx.match[1];
    logger.info(`Subscription extension request for tier: ${tierId}`, {
      from: ctx.from.id,
      username: ctx.from.username
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
    const tier = config.subscriptionTiers[tierId];
    
    if (!tier) {
      logger.error(`Tier not found for extension: ${tierId}`);
      await ctx.reply(formatters.error('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'));
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = ctx.user;
    const hasActiveSubscription = user.hasActiveSubscription();
    const daysLeft = user.getDaysLeftInSubscription();
    
    // –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    let message = '';
    
    if (hasActiveSubscription) {
      message = formatters.info(`–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ "${tier.name}"`) +
        `\n\n–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ ${daysLeft} ${getDayWordForm(daysLeft)}` +
        `\n–ü—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —ç—Ç–∏ –¥–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –Ω–æ–≤–æ–º—É —Å—Ä–æ–∫—É –ø–æ–¥–ø–∏—Å–∫–∏.` +
        `\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è: ${tier.price} Stars` +
        `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${tier.durationInDays} –¥–Ω–µ–π`;
    } else {
      message = formatters.info(`–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ "${tier.name}"`) +
        `\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${tier.price} Stars` +
        `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${tier.durationInDays} –¥–Ω–µ–π`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    await ctx.reply(message, Markup.inlineKeyboard([
      [Markup.button.callback(`–û–ø–ª–∞—Ç–∏—Ç—å ${tier.price} Stars`, `stars_subscribe_${tierId}`)],
      [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel_payment')]
    ]));
    
  } catch (error) {
    logger.error(`Error in extend_term handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

paymentsModule.action(/^extend_channel_(.+)$/, async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const channelId = ctx.match[1];
    logger.info(`Channel subscription extension request for channel: ${channelId}`, {
      from: ctx.from.id,
      username: ctx.from.username
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    const channel = findChannelById(channelId);
    
    if (!channel) {
      logger.error(`Channel not found for extension: ${channelId}`);
      await ctx.reply(formatters.error('–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'));
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª
    const user = ctx.user;
    const channelSubscription = user.channelSubscriptions.find(sub => sub.channelId === channelId);
    let daysLeft = 0;
    let hasActiveSubscription = false;
    
    if (channelSubscription && channelSubscription.active && channelSubscription.endDate) {
      const endDate = new Date(channelSubscription.endDate);
      const now = new Date();
      const diffMs = endDate - now;
      daysLeft = Math.max(0, Math.ceil(diffMs / (1000 * 60 * 60 * 24)));
      hasActiveSubscription = daysLeft > 0;
    }
    
    // –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    let message = '';
    
    if (hasActiveSubscription) {
      message = formatters.info(`–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª "${channel.name}"`) +
        `\n\n–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ ${daysLeft} ${getDayWordForm(daysLeft)}` +
        `\n–ü—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —ç—Ç–∏ –¥–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –Ω–æ–≤–æ–º—É —Å—Ä–æ–∫—É –ø–æ–¥–ø–∏—Å–∫–∏.` +
        `\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è: ${channel.starsPrice} Stars` +
        `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30 –¥–Ω–µ–π`;
    } else {
      message = formatters.info(`–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª "${channel.name}"`) +
        `\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${channel.starsPrice} Stars` +
        `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 30 –¥–Ω–µ–π`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    await ctx.reply(message, Markup.inlineKeyboard([
      [Markup.button.callback(`–û–ø–ª–∞—Ç–∏—Ç—å ${channel.starsPrice} Stars`, `stars_channel_${channelId}`)],
      [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel_payment')]
    ]));
    
  } catch (error) {
    logger.error(`Error in extend_channel handler: ${error.message}`, { error });
    await ctx.reply(formatters.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'));
  }
});

paymentsModule.action('cancel_payment', async (ctx) => {
  try {
    await ctx.answerCbQuery('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
    await ctx.deleteMessage();
  } catch (error) {
    logger.error(`Error in cancel_payment handler: ${error.message}`, { error });
  }
});

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ "–¥–µ–Ω—å" –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞
 * @param {Number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
 * @returns {String} - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å–ª–æ–≤–∞
 */
function getDayWordForm(days) {
  if (days % 10 === 1 && days % 100 !== 11) {
    return '–¥–µ–Ω—å';
  } else if ([2, 3, 4].includes(days % 10) && ![12, 13, 14].includes(days % 100)) {
    return '–¥–Ω—è';
  } else {
    return '–¥–Ω–µ–π';
  }
}

module.exports = paymentsModule; 