const { Telegraf, session } = require('telegraf');
const TelegrafSessionLocal = require('telegraf-session-local');
const config = require('./config');
const logger = require('./utils/logger');
const { connectToDatabase } = require('./config/database');
const { userIdentification } = require('./middleware/auth');
const terminalStyleMiddleware = require('./middleware/terminal');
const { Markup } = require('telegraf');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
const authModule = require('./modules/auth');
const paymentsModule = require('./modules/payments');
const contentModule = require('./modules/content');
const adminModule = require('./modules/admin');
const miniAppModule = require('./modules/miniapp');
const { startScheduler } = require('./scripts/scheduler');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(config.bot.token);

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
const localSession = new TelegrafSessionLocal({
  database: 'sessions.json',
  property: 'session',
  storage: TelegrafSessionLocal.storageMemory
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx?.updateType || 'unknown'}`, {
    error: err.message,
    userId: ctx?.from?.id
  });
  
  // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  if (ctx && ctx.chat && ctx.telegram) {
    try {
      ctx.telegram.sendMessage(
        ctx.chat.id, 
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      ).catch(() => {});
    } catch (e) {
      // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    }
  }
});

// Middleware –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
bot.use(localSession.middleware());

// Middleware –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(userIdentification);

// Middleware –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ
bot.use(terminalStyleMiddleware);

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.on('message', (ctx, next) => {
  logger.info('=== DEBUG: GOT MESSAGE EVENT ===', {
    from: ctx.from,
    updateType: ctx.updateType,
    updateSubType: ctx.updateSubTypes,
    hasWebAppData: ctx.message && ctx.message.web_app_data ? 'YES' : 'NO',
    chatType: ctx.chat.type,
    text: ctx.message.text
  });
  return next();
});

// –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è web_app_data, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –î–û –º–æ–¥—É–ª–µ–π
bot.on('web_app_data', (ctx, next) => {
  logger.info('=== DEBUG: WEB_APP_DATA CAUGHT AT ROOT LEVEL ===', {
    from: ctx.from,
    data: ctx.message.web_app_data,
    chatType: ctx.chat.type
  });
  return next();
});

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª–∏
bot.use(authModule);
bot.use(paymentsModule);
bot.use(contentModule);
bot.use(adminModule);
bot.use(miniAppModule);

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.command('debug_mode', async (ctx) => {
  try {
    logger.info('Entering debug mode', {
      userId: ctx.from.id,
      username: ctx.from.username,
      chatId: ctx.chat.id
    });
    
    await ctx.reply('üß™ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:',
      Markup.inlineKeyboard([
        [Markup.button.callback('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ–±—Ö—É–∫', 'debug_webhook')],
        [Markup.button.callback('üì± –ü—Ä–æ–≤–µ—Ä–∏—Ç—å WebApp', 'debug_webapp')],
        [Markup.button.callback('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±—Ö—É–∫', 'debug_reset_webhook')],
        [Markup.button.callback('üìä –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π', 'debug_show_events')]
      ])
    );
  } catch (error) {
    logger.error(`Error in debug_mode command: ${error.message}`, { error });
    await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏: ${error.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
bot.action('debug_webhook', async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
    const webhookInfo = await ctx.telegram.getWebhookInfo();
    
    await ctx.answerCbQuery('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
    const infoMessage = 
      `üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ:\n\n` +
      `URL: ${webhookInfo.url || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n` +
      `–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${webhookInfo.last_error_message || '–ù–µ—Ç –æ—à–∏–±–æ–∫'}\n` +
      `–û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${webhookInfo.pending_update_count || 0}\n\n` +
      `–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ${config.bot.useWebhook ? 'Webhook' : 'Long Polling'}\n` +
      `–ü–æ—Ä—Ç: ${config.bot.webhookPort}`;
    
    await ctx.editMessageText(infoMessage, Markup.inlineKeyboard([
      [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_debug')]
    ]));
  } catch (error) {
    logger.error(`Error in debug_webhook action: ${error.message}`, { error });
    await ctx.answerCbQuery(`–û—à–∏–±–∫–∞: ${error.message.substring(0, 200)}`);
  }
});

bot.action('debug_webapp', async (ctx) => {
  try {
    await ctx.answerCbQuery('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ WebApp');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫ URL
    const testUrl = `${config.miniApp.url}?test=true&user_id=${ctx.from.id}`;
    
    await ctx.editMessageText(
      'üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebApp\n\n' +
      '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö.',
      Markup.inlineKeyboard([
        [Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', testUrl)],
        [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_debug')]
      ])
    );
  } catch (error) {
    logger.error(`Error in debug_webapp action: ${error.message}`, { error });
    await ctx.answerCbQuery(`–û—à–∏–±–∫–∞: ${error.message.substring(0, 200)}`);
  }
});

bot.action('debug_reset_webhook', async (ctx) => {
  try {
    await ctx.answerCbQuery('–ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞');
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫
    await ctx.telegram.deleteWebhook();
    logger.info('Webhook deleted during debug');
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL –≤–µ–±—Ö—É–∫–∞ –∏ useWebhook = true, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
    if (config.bot.webhookUrl && config.bot.useWebhook) {
      await ctx.telegram.setWebhook(config.bot.webhookUrl);
      logger.info(`New webhook set to ${config.bot.webhookUrl} during debug`);
      
      await ctx.editMessageText(
        `üîÑ –í–µ–±—Ö—É–∫ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n` +
        `–ù–æ–≤—ã–π URL: ${config.bot.webhookUrl}`,
        Markup.inlineKeyboard([
          [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_debug')]
        ])
      );
    } else {
      // –ò–Ω–∞—á–µ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ long polling
      logger.info('Bot is working in long polling mode after debug reset');
      
      await ctx.editMessageText(
        'üîÑ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: Long Polling\n\n' +
        '–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ Long Polling.',
        Markup.inlineKeyboard([
          [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_debug')]
        ])
      );
    }
  } catch (error) {
    logger.error(`Error in debug_reset_webhook action: ${error.message}`, { error });
    await ctx.answerCbQuery(`–û—à–∏–±–∫–∞: ${error.message.substring(0, 200)}`);
  }
});

bot.action('debug_show_events', async (ctx) => {
  try {
    await ctx.answerCbQuery('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ª–æ–≥–æ–≤ –∏–ª–∏ –∏–∑ –ø–∞–º—è—Ç–∏
    await ctx.editMessageText(
      'üìä –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π\n\n' +
      '–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.',
      Markup.inlineKeyboard([
        [Markup.button.callback('¬´ –ù–∞–∑–∞–¥', 'back_to_debug')]
      ])
    );
  } catch (error) {
    logger.error(`Error in debug_show_events action: ${error.message}`, { error });
    await ctx.answerCbQuery(`–û—à–∏–±–∫–∞: ${error.message.substring(0, 200)}`);
  }
});

bot.action('back_to_debug', async (ctx) => {
  try {
    await ctx.answerCbQuery('–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ—Ç–ª–∞–¥–∫–∏');
    
    await ctx.editMessageText('üß™ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:',
      Markup.inlineKeyboard([
        [Markup.button.callback('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ–±—Ö—É–∫', 'debug_webhook')],
        [Markup.button.callback('üì± –ü—Ä–æ–≤–µ—Ä–∏—Ç—å WebApp', 'debug_webapp')],
        [Markup.button.callback('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±—Ö—É–∫', 'debug_reset_webhook')],
        [Markup.button.callback('üìä –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π', 'debug_show_events')]
      ])
    );
  } catch (error) {
    logger.error(`Error in back_to_debug action: ${error.message}`, { error });
    await ctx.answerCbQuery(`–û—à–∏–±–∫–∞: ${error.message.substring(0, 200)}`);
  }
});

// –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
async function startBot() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectToDatabase();
    
    console.log("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API...");
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Express –¥–ª—è API —Å–Ω–∞—á–∞–ª–∞, –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    console.log("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API —Å–µ—Ä–≤–µ—Ä...");
    const express = require('express');
    const bodyParser = require('body-parser');
    const cors = require('cors');
    const path = require('path');
    
    // –î–µ–ª–∞–µ–º –±–æ—Ç–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è API
    global.bot = bot;
    console.log("–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ");
    
    const miniAppApi = require('./modules/miniapp/api');
    
    const app = express();
    
    // Middleware
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    app.use(cors({
      origin: '*', // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization']
    }));
    
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({ extended: true }));
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ public/
    app.use(express.static(path.join(__dirname, '../public')));
    console.log("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ public/");
    
    // –õ–æ–≥–≥–µ—Ä –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    app.use((req, res, next) => {
      logger.debug(`API Request: ${req.method} ${req.path}`, {
        ip: req.ip,
        userAgent: req.get('User-Agent'),
        body: req.method === 'POST' ? JSON.stringify(req.body).substring(0, 200) : undefined
      });
      next();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ OPTIONS
    app.options('*', (req, res) => {
      res.status(200).end();
      logger.debug('–û–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å OPTIONS');
    });
    
    // –ú–∞—Ä—à—Ä—É—Ç—ã API
    app.use('/api/miniapp', miniAppApi);
    
    // –ó–¥–æ—Ä–æ–≤—å–µ API
    app.get('/api/health', (req, res) => {
      res.json({ status: 'ok', version: '1.0.0', env: process.env.NODE_ENV });
    });
    
    // –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç, –µ—Å–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è
    app.get('/', (req, res) => {
      res.sendFile(path.join(__dirname, '../public/index.html'));
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
    app.use((err, req, res, next) => {
      logger.error(`API Error: ${err.message}`, { error: err, path: req.path });
      res.status(500).json({ error: 'Internal Server Error' });
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000
    const apiPort = process.env.API_PORT || 3000;
    console.log(`–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${apiPort}...`);
    
    const server = app.listen(apiPort, () => {
      logger.info(`API server started on port ${apiPort}`);
      console.log(`API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${apiPort}`);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
    server.on('error', (error) => {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ API —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
      if (error.code === 'EADDRINUSE') {
        // –ï—Å–ª–∏ –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ—Ä—Ç—É
        const newPort = apiPort + 1;
        logger.warn(`Port ${apiPort} is already in use, trying port ${newPort}`);
        console.log(`–ü–æ—Ä—Ç ${apiPort} –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ—Ä—Ç ${newPort}...`);
        
        const newServer = app.listen(newPort, () => {
          logger.info(`API server started on alternative port ${newPort}`);
          console.log(`API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ—Ä—Ç—É ${newPort}`);
        });
        
        // –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –Ω–∞ –Ω–æ–≤–æ–º –ø–æ—Ä—Ç—É
        newServer.on('error', (newError) => {
          logger.error(`Failed to start API server on alternative port: ${newError.message}`);
          console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API —Å–µ—Ä–≤–µ—Ä –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ—Ä—Ç—É: ${newError.message}`);
        });
      } else {
        logger.error(`Error starting API server: ${error.message}`);
      }
    });
    
    // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
    console.log("API –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...");
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (webhook –∏–ª–∏ polling)
    if (config.bot.webhookUrl && config.bot.useWebhook) {
      // Webhook mode
      await bot.telegram.setWebhook(config.bot.webhookUrl);
      logger.info(`Bot webhook set to ${config.bot.webhookUrl}`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –∑–∞–ø—Ä–æ—Å–æ–≤
      const app = require('express')();
      app.use(require('body-parser').json());
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook –∑–∞–ø—Ä–æ—Å–æ–≤
      app.post('/webhook', (req, res) => {
        bot.handleUpdate(req.body, res);
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      const webhookServer = app.listen(config.bot.webhookPort, () => {
        logger.info(`Webhook server started on port ${config.bot.webhookPort}`);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä–∞
      webhookServer.on('error', (error) => {
        if (error.code === 'EADDRINUSE') {
          // –ï—Å–ª–∏ –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ—Ä—Ç—É
          const newPort = config.bot.webhookPort + 1;
          logger.warn(`Webhook port ${config.bot.webhookPort} is already in use, trying port ${newPort}`);
          
          const newServer = app.listen(newPort, () => {
            logger.info(`Webhook server started on alternative port ${newPort}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤–µ–±—Ö—É–∫–∞ —Å –Ω–æ–≤—ã–º –ø–æ—Ä—Ç–æ–º
            const webhookUrlParts = new URL(config.bot.webhookUrl);
            webhookUrlParts.port = newPort;
            const newWebhookUrl = webhookUrlParts.toString();
            
            bot.telegram.setWebhook(newWebhookUrl)
              .then(() => logger.info(`Updated webhook URL to ${newWebhookUrl}`))
              .catch((err) => logger.error(`Failed to update webhook URL: ${err.message}`));
          });
          
          newServer.on('error', (newError) => {
            logger.error(`Failed to start webhook server on alternative port: ${newError.message}`);
          });
        } else {
          logger.error(`Error starting webhook server: ${error.message}`);
        }
      });
    } else {
      // Polling mode
      console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...');
      try {
        await bot.launch();
        console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
        logger.info('Bot started in polling mode');
      } catch (error) {
        console.log(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: ${error.message}`);
        logger.error(`Exception when starting bot: ${error.message}`, { error });
        throw error;
      }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    if (process.env.NODE_ENV !== 'test') {
      console.log("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á...");
      startScheduler();
      console.log("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω");
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    process.once('SIGINT', () => {
      bot.stop('SIGINT');
      logger.info('Bot stopped due to SIGINT signal');
    });
    
    process.once('SIGTERM', () => {
      bot.stop('SIGTERM');
      logger.info('Bot stopped due to SIGTERM signal');
    });
    
    logger.info('TERM bot successfully started');
    console.log('TERM –±–æ—Ç –∏ API —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã');
  } catch (error) {
    logger.error(`Failed to start bot: ${error.message}`, { error });
    console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: ${error.message}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot(); 